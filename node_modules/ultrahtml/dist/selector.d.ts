// Generated by dts-bundle-generator v8.0.1

type Node = DocumentNode | ElementNode | TextNode | CommentNode | DoctypeNode;
type NodeType = typeof DOCUMENT_NODE | typeof ELEMENT_NODE | typeof TEXT_NODE | typeof COMMENT_NODE | typeof DOCTYPE_NODE;
interface Location {
	start: number;
	end: number;
}
interface BaseNode {
	type: NodeType;
	loc: [
		Location,
		Location
	];
	parent: Node;
	[key: string]: any;
}
interface LiteralNode extends BaseNode {
	value: string;
}
interface ParentNode extends BaseNode {
	children: Node[];
}
interface DocumentNode extends Omit<ParentNode, "parent"> {
	type: typeof DOCUMENT_NODE;
	attributes: Record<string, string>;
	parent: undefined;
}
interface ElementNode extends ParentNode {
	type: typeof ELEMENT_NODE;
	name: string;
	attributes: Record<string, string>;
}
interface TextNode extends LiteralNode {
	type: typeof TEXT_NODE;
}
interface CommentNode extends LiteralNode {
	type: typeof COMMENT_NODE;
}
interface DoctypeNode extends LiteralNode {
	type: typeof DOCTYPE_NODE;
}
declare const DOCUMENT_NODE = 0;
declare const ELEMENT_NODE = 1;
declare const TEXT_NODE = 2;
declare const COMMENT_NODE = 3;
declare const DOCTYPE_NODE = 4;
export declare function specificity(selector: string): number;
export declare function matches(node: Node, selector: string): boolean;
export declare function querySelector(node: Node, selector: string): Node;
export declare function querySelectorAll(node: Node, selector: string): Node[];

export {
	querySelectorAll as default,
};

export {};
